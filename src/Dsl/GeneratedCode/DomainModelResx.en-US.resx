<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousMoniker" xml:space="preserve">
    <value>Ambiguous moniker '{0}' encountered. It is used for both '{1}' and '{2}'.</value>
  </data>
  <data name="AmbiguousSchema" xml:space="preserve">
    <value>More than one schema found for target namespace '{0}', use the first one at '{1}'.</value>
  </data>
  <data name="AssociationConnectorSourceMultiplicityDisplayDefaultText" xml:space="preserve">
    <value>SourceMultiplicityDisplay</value>
  </data>
  <data name="AssociationConnectorTargetMultiplicityDisplayDefaultText" xml:space="preserve">
    <value>TargetMultiplicityDisplay</value>
  </data>
  <data name="AssociationConnectorTargetPropertyNameDefaultText" xml:space="preserve">
    <value>TargetPropertyName</value>
  </data>
  <data name="BidirectionalAssociationToolboxItem" xml:space="preserve">
    <value>Bidirectional Association</value>
  </data>
  <data name="BidirectionalAssociationToolboxTooltip" xml:space="preserve">
    <value>Create a link between two entities with navigation properties on both sides</value>
  </data>
  <data name="BidirectionalConnectorSourcePropertyNameDefaultText" xml:space="preserve">
    <value>SourcePropertyName</value>
  </data>
  <data name="BindingErrorOccurred" xml:space="preserve">
    <value>Extensions for this designer may not be found as a MEF binding error has occurred. The error that occurred was:
{0}</value>
  </data>
  <data name="CannotCloseExistingDiagramDocument" xml:space="preserve">
    <value>Diagram file '{0}' cannot be closed.</value>
  </data>
  <data name="CannotMonikerizeElement" xml:space="preserve">
    <value>Instances of DomainClass '{0}' cannot be serialized as a moniker.
A DomainClass can be serialized as a moniker only if 
1) it has a defined/inherited DomainProperty marked as IsMonikerKey=true, or 
2) it is marked/inherited with SerializeId=true.</value>
  </data>
  <data name="CannotOpenDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
  </data>
  <data name="CannotSaveDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
  </data>
  <data name="Class DiagramsToolboxTab" xml:space="preserve">
    <value>Class Diagrams</value>
  </data>
  <data name="ClassShapeAttributesCompartmentTitle" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="ClassShapeNameDefaultText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CommentBoxShapeCommentDefaultText" xml:space="preserve">
    <value>BusinessRulesShapeNameDecorator</value>
  </data>
  <data name="CommentsReferenceTypesToolboxItem" xml:space="preserve">
    <value>Comment Link</value>
  </data>
  <data name="CommentsReferenceTypesToolboxTooltip" xml:space="preserve">
    <value>Link a comment to an element</value>
  </data>
  <data name="CommentToolboxItem" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="CommentToolboxTooltip" xml:space="preserve">
    <value>Create a comment on this diagram</value>
  </data>
  <data name="DanglingRelationship" xml:space="preserve">
    <value>Relationship '{0}' instance is missing target role-player.</value>
  </data>
  <data name="EnumerationToolboxItem" xml:space="preserve">
    <value>Enum</value>
  </data>
  <data name="EnumerationToolboxTooltip" xml:space="preserve">
    <value>Creates an enumeration</value>
  </data>
  <data name="EnumShapeNameDefaultText" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="EnumShapeValuesCompartmentTitle" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="ExpectingFullFormRelationship" xml:space="preserve">
    <value>Element '{0}' is treated as the target role-player of a relationship '{1}' instance, which should be serialized in full-form.</value>
  </data>
  <data name="ExpectingShortFormRelationship" xml:space="preserve">
    <value>Instances of relationship '{0}' should be serialized in short-form.</value>
  </data>
  <data name="FormatList" xml:space="preserve">
    <value>Entity Framework Visual Editor (*.efmodel)|*.efmodel</value>
  </data>
  <data name="GeneralizationToolboxItem" xml:space="preserve">
    <value>Inheritance</value>
  </data>
  <data name="GeneralizationToolboxTooltip" xml:space="preserve">
    <value>Create an inheritance relationship between two entities</value>
  </data>
  <data name="IgnoredPropertyValue" xml:space="preserve">
    <value>Invalid property value '{0}' for property '{1}' with type '{2}', ignored.</value>
  </data>
  <data name="InvalidPropertyValue" xml:space="preserve">
    <value>Invalid property value '{0}' for property '{1}' with type '{2}'.</value>
  </data>
  <data name="InvalidSaveDiagramType" xml:space="preserve">
    <value>'{0}' is not a valid diagram type.</value>
  </data>
  <data name="InvalidSaveRootElementType" xml:space="preserve">
    <value>'{0}' is not a valid root element type.</value>
  </data>
  <data name="MinimumMultiplicityMissingLink" xml:space="preserve">
    <value>{0} {1} has no {2}.</value>
  </data>
  <data name="MissingId" xml:space="preserve">
    <value>Missing 'Id' attribute, a new Guid '{0}' is auto-generated.</value>
  </data>
  <data name="MissingMoniker" xml:space="preserve">
    <value>Missing moniker. A moniker is expected in attribute '{0}'.</value>
  </data>
  <data name="MissingTransaction" xml:space="preserve">
    <value>This must be called within the context of an active transaction.</value>
  </data>
  <data name="ModelClassToolboxItem" xml:space="preserve">
    <value>Entity</value>
  </data>
  <data name="ModelClassToolboxTooltip" xml:space="preserve">
    <value>Create a persistent entity</value>
  </data>
  <data name="ModelExplorerTitle" xml:space="preserve">
    <value>Entity Model Explorer</value>
  </data>
  <data name="MonikerResolvedToDuplicateLink" xml:space="preserve">
    <value>Resolving moniker '{0}' causes a duplicate link to be created, so the link and the moniker are ignored.</value>
  </data>
  <data name="NoSchema" xml:space="preserve">
    <value>Cannot find a schema that defines target namespace '{0}', schema validation skipped.</value>
  </data>
  <data name="SaveOperationCancelled" xml:space="preserve">
    <value>Save operation cancelled.</value>
  </data>
  <data name="SaveValidationFailed" xml:space="preserve">
    <value>There were validation errors, continue save?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association.Description" xml:space="preserve">
    <value>Associations between Classes.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association.DisplayName" xml:space="preserve">
    <value>Association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/CollectionClass.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/CollectionClass.Description" xml:space="preserve">
    <value>Class used to instanciate association properties. Implements ICollection&lt;&gt;</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/CollectionClass.DisplayName" xml:space="preserve">
    <value>Collection Class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/ForeignKeyLocation.Description" xml:space="preserve">
    <value>Which class should hold the foreign key for this relationship</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/ForeignKeyLocation.DisplayName" xml:space="preserve">
    <value>Foreign Key Location</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/IsCollectionClassTracking.Description" xml:space="preserve">
    <value>If true, Association.CollectionClass tracks ModelRoot.DefaultCollectionClass</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/IsCollectionClassTracking.DisplayName" xml:space="preserve">
    <value>Is Collection Class Tracking</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Persistent.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Persistent.Description" xml:space="preserve">
    <value>If false, this is a transient association not stored in the database but instead created in code</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Persistent.DisplayName" xml:space="preserve">
    <value>Persistent</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Source.DisplayName" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Source.PropertyDisplayName" xml:space="preserve">
    <value>Targets</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.Description" xml:space="preserve">
    <value>The action to take when an entity on this end is deleted.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceDeleteAction.DisplayName" xml:space="preserve">
    <value>End1 On Delete</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.Description" xml:space="preserve">
    <value>The allowed number of entities at this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicity.DisplayName" xml:space="preserve">
    <value>End1 Multiplicity</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicityDisplay.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceMultiplicityDisplay.DisplayName" xml:space="preserve">
    <value>Source Multiplicity Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceRole.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceRole.Description" xml:space="preserve">
    <value>Which object(s) in this association is/are the principal object(s)?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/SourceRole.DisplayName" xml:space="preserve">
    <value>End1 Role</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Summary.Category" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Summary.Description" xml:space="preserve">
    <value>Brief code documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Summary.DisplayName" xml:space="preserve">
    <value>Comment Summary</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/Target.PropertyDisplayName" xml:space="preserve">
    <value>Sources</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.Description" xml:space="preserve">
    <value>The action to take when an entity on this end is deleted.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDeleteAction.DisplayName" xml:space="preserve">
    <value>End2 On Delete</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDescription.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDescription.Description" xml:space="preserve">
    <value>Detailed code documentation for this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetDescription.DisplayName" xml:space="preserve">
    <value>End2 Comment Detail</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.Description" xml:space="preserve">
    <value>The allowed number of entities at this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicity.DisplayName" xml:space="preserve">
    <value>End2 Multiplicity</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicityDisplay.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetMultiplicityDisplay.DisplayName" xml:space="preserve">
    <value>Target Multiplicity Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.Description" xml:space="preserve">
    <value>Name of the entity property that returns the value at this end</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetPropertyName.DisplayName" xml:space="preserve">
    <value>End1 Navigation Property</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetRole.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetRole.Description" xml:space="preserve">
    <value>Which object(s) in this association is/are the dependent object(s)?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetRole.DisplayName" xml:space="preserve">
    <value>End2 Role</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetSummary.Category" xml:space="preserve">
    <value>End 2</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetSummary.Description" xml:space="preserve">
    <value>Short code documentation for this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Association/TargetSummary.DisplayName" xml:space="preserve">
    <value>End2 Comment Summary</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.AssociationConnector.DisplayName" xml:space="preserve">
    <value>Association Connector</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.AssociationConnector/Color.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.AssociationConnector/Color.DisplayName" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.AssociationConnector/DashStyle.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.AssociationConnector/DashStyle.DisplayName" xml:space="preserve">
    <value>Dash Style</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DisplayName" xml:space="preserve">
    <value>Bidirectional Association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalSource.DisplayName" xml:space="preserve">
    <value>Bidirectional Source</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalSource.PropertyDisplayName" xml:space="preserve">
    <value>Bidirectional Targets</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalTarget.DisplayName" xml:space="preserve">
    <value>Bidirectional Target</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/BidirectionalTarget.PropertyDisplayName" xml:space="preserve">
    <value>Bidirectional Sources</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.Description" xml:space="preserve">
    <value>Detailed code documentation for this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceDescription.DisplayName" xml:space="preserve">
    <value>End1 Comment Detail</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.Description" xml:space="preserve">
    <value>Name of the entity property that returns the value at this end</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourcePropertyName.DisplayName" xml:space="preserve">
    <value>End2 Navigation Property</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.Category" xml:space="preserve">
    <value>End 1</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.Description" xml:space="preserve">
    <value>Short code documentation for this end of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalAssociation/SourceSummary.DisplayName" xml:space="preserve">
    <value>End1 Comment Summary</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.BidirectionalConnector.DisplayName" xml:space="preserve">
    <value>Bidirectional Connector</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassHasAttributes.DisplayName" xml:space="preserve">
    <value>Class Has Attributes</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/Attribute.DisplayName" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/Attribute.PropertyDisplayName" xml:space="preserve">
    <value>Model Class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/ModelClass.DisplayName" xml:space="preserve">
    <value>Model Class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassHasAttributes/ModelClass.PropertyDisplayName" xml:space="preserve">
    <value>Attributes</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassModelElement.Description" xml:space="preserve">
    <value>Element with a Description</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassModelElement.DisplayName" xml:space="preserve">
    <value>Class Model Element</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape.DisplayName" xml:space="preserve">
    <value>Class Shape</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.DisplayName" xml:space="preserve">
    <value>Fill Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.DisplayName" xml:space="preserve">
    <value>Outline Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.ClassShape.Outline Dash Style</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.DisplayName" xml:space="preserve">
    <value>Outline Dash Style</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineThickness.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.ClassShape.Outline Thickness</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/OutlineThickness.DisplayName" xml:space="preserve">
    <value>Outline Thickness</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.DisplayName" xml:space="preserve">
    <value>Text Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/Visible.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/Visible.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.ClassShape.Visible</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ClassShape/Visible.DisplayName" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerConcreteType.Description" xml:space="preserve">
    <value>Only concrete (not abstract) classes will have tables</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerConcreteType.DisplayName" xml:space="preserve">
    <value>TablePerConcreteType</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerHierarchy.Description" xml:space="preserve">
    <value>A table will be used for every inheritance chain</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerHierarchy.DisplayName" xml:space="preserve">
    <value>TablePerHierarchy</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerType.Description" xml:space="preserve">
    <value>A table will be used for every class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerType.DisplayName" xml:space="preserve">
    <value>TablePerType</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CollectionType/HashSet.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CollectionType/HashSet.DisplayName" xml:space="preserve">
    <value>HashSet</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CollectionType/List.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CollectionType/List.DisplayName" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Comment.DisplayName" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Comment/Text.Description" xml:space="preserve">
    <value>Comment text</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Comment/Text.DisplayName" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentBoxShape.DisplayName" xml:space="preserve">
    <value>Comment Box Shape</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentConnector.DisplayName" xml:space="preserve">
    <value>Comment Connector</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DisplayName" xml:space="preserve">
    <value>Comment References Subjects</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Comment.DisplayName" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Comment.PropertyDisplayName" xml:space="preserve">
    <value>Subjects</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Subject.DisplayName" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects/Subject.PropertyDisplayName" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Concurrency/None.Description" xml:space="preserve">
    <value>Don't generate code to handle concurrency</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Concurrency/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Concurrency/Optimistic.Description" xml:space="preserve">
    <value>Generate timestamp columns to handle optimistic concurrency</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Concurrency/Optimistic.DisplayName" xml:space="preserve">
    <value>Optimistic</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Default.Description" xml:space="preserve">
    <value>Use default for model</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Default.DisplayName" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/None.Description" xml:space="preserve">
    <value>Don't generate code to handle concurrency</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Optimistic.Description" xml:space="preserve">
    <value>Generate timestamp columns to handle optimistic concurrency</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Optimistic.DisplayName" xml:space="preserve">
    <value>Optimistic</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ContainerAccess/Internal.DisplayName" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ContainerAccess/Public.DisplayName" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/CreateDatabaseIfNotExists.Description" xml:space="preserve">
    <value>Will recreate and optionally re-seed the database only if the database does not exist.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/CreateDatabaseIfNotExists.DisplayName" xml:space="preserve">
    <value>CreateDatabaseIfNotExists</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseAlways.Description" xml:space="preserve">
    <value>Will always recreate and optionally re-seed the database the first time that a context is used in the app domain.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseAlways.DisplayName" xml:space="preserve">
    <value>DropCreateDatabaseAlways</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseIfModelChanges.Description" xml:space="preserve">
    <value>Will delete, recreate, and optionally re-seed the database only if the model has changed since the database was created.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseIfModelChanges.DisplayName" xml:space="preserve">
    <value>DropCreateDatabaseIfModelChanges</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/MigrateDatabaseToLatestVersion.Description" xml:space="preserve">
    <value>Will use Code First Migrations to update the database to the latest version.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/MigrateDatabaseToLatestVersion.DisplayName" xml:space="preserve">
    <value>MigrateDatabaseToLatestVersion</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/None.Description" xml:space="preserve">
    <value>Null configuration. Will not check database for correctness, speeding up initialization and queries.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/None.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.SqlServer</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer.DisplayName" xml:space="preserve">
    <value>SqlServer</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer2012.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.SqlServer2012</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer2012.DisplayName" xml:space="preserve">
    <value>SqlServer2012</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DBWorkflow/TablePerTypeStrategy.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DBWorkflow/TablePerTypeStrategy.DisplayName" xml:space="preserve">
    <value>TablePerTypeStrategy</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DeleteAction/Cascade.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DeleteAction/Cascade.DisplayName" xml:space="preserve">
    <value>Cascade</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DeleteAction/None.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.DeleteAction/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFModelDiagram.DisplayName" xml:space="preserve">
    <value>Class Diagram</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFModelDomainModel.Description" xml:space="preserve">
    <value>Entity Framework visual editor for EF6, EFCore and beyond.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFModelDomainModel.DisplayName" xml:space="preserve">
    <value>Entity Framework Visual Editor</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFVersion/EF6.Description" xml:space="preserve">
    <value>Entity Framework 6</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFVersion/EF6.DisplayName" xml:space="preserve">
    <value>EF6</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFVersion/EFCore.Description" xml:space="preserve">
    <value>Entity Framework Core</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EFVersion/EFCore.DisplayName" xml:space="preserve">
    <value>EFCore</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/Dependent.Description" xml:space="preserve">
    <value>Class is the dependent part of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/Dependent.DisplayName" xml:space="preserve">
    <value>Dependent</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/NotApplicable.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.EndpointRole.NotApplicable</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/NotApplicable.DisplayName" xml:space="preserve">
    <value>NotApplicable</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/NotSet.Description" xml:space="preserve">
    <value>Dependent/Principal roles are design decisions and have not been set</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/NotSet.DisplayName" xml:space="preserve">
    <value>NotSet</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/Principal.Description" xml:space="preserve">
    <value>Class is the controlling (i.e, principal) part of the association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EndpointRole/Principal.DisplayName" xml:space="preserve">
    <value>Principal</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape.DisplayName" xml:space="preserve">
    <value>Enum Shape</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.DisplayName" xml:space="preserve">
    <value>Fill Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.DisplayName" xml:space="preserve">
    <value>Outline Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.DisplayName" xml:space="preserve">
    <value>Text Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/Visible.Category" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/Visible.Description" xml:space="preserve">
    <value>Description for Sawczyn.EFDesigner.EFModel.EnumShape.Visible</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumShape/Visible.DisplayName" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int16.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int16.DisplayName" xml:space="preserve">
    <value>Int16</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int32.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int32.DisplayName" xml:space="preserve">
    <value>Int32</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int64.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.EnumValueType/Int64.DisplayName" xml:space="preserve">
    <value>Int64</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/None.Description" xml:space="preserve">
    <value>No foreign key should be generated</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Source.Description" xml:space="preserve">
    <value>Foreign key is contained in the Source class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Source.DisplayName" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Target.Description" xml:space="preserve">
    <value>Foreign key is contained in the Target class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Target.DisplayName" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization.Description" xml:space="preserve">
    <value>Inheritance between Classes.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization.DisplayName" xml:space="preserve">
    <value>Inheritance</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization/Subclass.DisplayName" xml:space="preserve">
    <value>Subclass</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization/Subclass.PropertyDisplayName" xml:space="preserve">
    <value>Superclass</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization/Superclass.DisplayName" xml:space="preserve">
    <value>Base Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Generalization/Superclass.PropertyDisplayName" xml:space="preserve">
    <value>Subclasses</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.GeneralizationConnector.DisplayName" xml:space="preserve">
    <value>Generalization Connector</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Color.Description" xml:space="preserve">
    <value>Value is a color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Color.DisplayName" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Date.Description" xml:space="preserve">
    <value>Value is a date (consider changing type to DateTime)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Date.DisplayName" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/DateTime.Description" xml:space="preserve">
    <value>Value is a date/time (consider changing type to DateTime)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/DateTime.DisplayName" xml:space="preserve">
    <value>DateTime</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Email.Description" xml:space="preserve">
    <value>Value is an email address</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Email.DisplayName" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Month.Description" xml:space="preserve">
    <value>Value is a month</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Month.DisplayName" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/None.Description" xml:space="preserve">
    <value>No special meaning</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Number.Description" xml:space="preserve">
    <value>Value is a number (consider changing type to a numeric type)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Number.DisplayName" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Password.Description" xml:space="preserve">
    <value>Value is a password</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Password.DisplayName" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Range.Description" xml:space="preserve">
    <value>Value is a numeric range</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Range.DisplayName" xml:space="preserve">
    <value>Range</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Search.Description" xml:space="preserve">
    <value>Value will be used in a search predicate</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Search.DisplayName" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Telephone.Description" xml:space="preserve">
    <value>Value is a telephone number</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Telephone.DisplayName" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Time.Description" xml:space="preserve">
    <value>Value is a time</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Time.DisplayName" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/URl.Description" xml:space="preserve">
    <value>Value is a URL</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/URl.DisplayName" xml:space="preserve">
    <value>URl</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Week.Description" xml:space="preserve">
    <value>Value is a calendar week</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.HTML5Type/Week.DisplayName" xml:space="preserve">
    <value>Week</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/AutoGenerated.Description" xml:space="preserve">
    <value>The value will be automatically generated in the database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/AutoGenerated.DisplayName" xml:space="preserve">
    <value>AutoGenerated</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/Manual.Description" xml:space="preserve">
    <value>The value will be entered by the program</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/Manual.DisplayName" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/None.Description" xml:space="preserve">
    <value>The associated property is not an identity</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.IdentityType/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.InheritanceModifier/Abstract.DisplayName" xml:space="preserve">
    <value>Abstract</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.InheritanceModifier/None.DisplayName" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.InheritanceModifier/Sealed.DisplayName" xml:space="preserve">
    <value>Sealed</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute.Description" xml:space="preserve">
    <value>An attribute of a class.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute.DisplayName" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.Description" xml:space="preserve">
    <value>If false, generates a backing store field with a partial method to hook getting and setting the property. If true, generates a simple auto property.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.DisplayName" xml:space="preserve">
    <value>Auto Property</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.Description" xml:space="preserve">
    <value>The name for the table column backing this property</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.DisplayName" xml:space="preserve">
    <value>Column Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.Category" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.Description" xml:space="preserve">
    <value>Detailed code documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.DisplayName" xml:space="preserve">
    <value>Comment Detail</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.Description" xml:space="preserve">
    <value>If this property is an identity, how the value is generated</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.DisplayName" xml:space="preserve">
    <value>Identity Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.Description" xml:space="preserve">
    <value>Should this attribute create an index in the database?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.DisplayName" xml:space="preserve">
    <value>Indexed</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.Description" xml:space="preserve">
    <value>If indexed, is the index a unique index?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.DisplayName" xml:space="preserve">
    <value>Indexed Unique</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.Description" xml:space="preserve">
    <value>Value for attribute when first created</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.DisplayName" xml:space="preserve">
    <value>Initial Value</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnNameTracking.Description" xml:space="preserve">
    <value>If true, ModelAttribute.ColumnName tracks ModelAttribute.Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnNameTracking.DisplayName" xml:space="preserve">
    <value>Is Column Name Tracking</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.Description" xml:space="preserve">
    <value>If true, this property serves as the concurrency value for the class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.DisplayName" xml:space="preserve">
    <value>Is Concurrency Token</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.Description" xml:space="preserve">
    <value>Does this attribute represent the identity of the object?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.DisplayName" xml:space="preserve">
    <value>Is Identity</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.Category" xml:space="preserve">
    <value>String Properties</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.Description" xml:space="preserve">
    <value>Maximum length of the string, 0 for no max length</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.DisplayName" xml:space="preserve">
    <value>Max Length</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.Category" xml:space="preserve">
    <value>String Properties</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.Description" xml:space="preserve">
    <value>Minimum length of the string, 0 for no minimum length</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.DisplayName" xml:space="preserve">
    <value>Min Length</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.Description" xml:space="preserve">
    <value>The name of the property. Must be a valid C# symbol.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.DisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.Description" xml:space="preserve">
    <value>Attribute will be stored in persistent storage</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.DisplayName" xml:space="preserve">
    <value>Persistent</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.Description" xml:space="preserve">
    <value>If true, no setter will be generated. Only valid for transient public properties.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.DisplayName" xml:space="preserve">
    <value>Read Only</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.Description" xml:space="preserve">
    <value>If true, cannot be null (or the default value for the property type, if not nullable)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.DisplayName" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.Description" xml:space="preserve">
    <value>Visibility for property setter; getter is public</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.DisplayName" xml:space="preserve">
    <value>Setter Visibility</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.Category" xml:space="preserve">
    <value>String Properties</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.Description" xml:space="preserve">
    <value>If not empty, will create a standard validation annotation for this attribute.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.DisplayName" xml:space="preserve">
    <value>String Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.Category" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.Description" xml:space="preserve">
    <value>Brief code documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.DisplayName" xml:space="preserve">
    <value>Comment Summary</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.Description" xml:space="preserve">
    <value>Unused - Alternate table to store this attribute. If empty, the class's table is used.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.DisplayName" xml:space="preserve">
    <value>Table Override</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.Description" xml:space="preserve">
    <value>Type of this attribute</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.DisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.Description" xml:space="preserve">
    <value>If true, property will be generated with the 'virtual' keyword</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.DisplayName" xml:space="preserve">
    <value>Virtual</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass.DisplayName" xml:space="preserve">
    <value>Entity</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.Description" xml:space="preserve">
    <value>Overridden concurrency handling strategy.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.DisplayName" xml:space="preserve">
    <value>Concurrency</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.Description" xml:space="preserve">
    <value>Optional comma-separated list of interfaces that will be added to the class definition</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.DisplayName" xml:space="preserve">
    <value>Custom Interfaces</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.Description" xml:space="preserve">
    <value>The schema to use for table creation. Overrides default schema for model if present.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.DisplayName" xml:space="preserve">
    <value>Database Schema</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.Description" xml:space="preserve">
    <value>Name of this class's container variable in the generated context</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.DisplayName" xml:space="preserve">
    <value>DbSet Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.Description" xml:space="preserve">
    <value>Should this class implement INotifyPropertyChanged?</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.DisplayName" xml:space="preserve">
    <value>Implement INotifyPropertyChanged</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.Description" xml:space="preserve">
    <value>If true, this will be generated as an abstract class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.DisplayName" xml:space="preserve">
    <value>Abstract</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseSchemaTracking.Description" xml:space="preserve">
    <value>If true, ModelClass.DatabaseSchema tracks ModelRoot.DatabaseSchema</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseSchemaTracking.DisplayName" xml:space="preserve">
    <value>Is Database Schema Tracking</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsNamespaceTracking.Description" xml:space="preserve">
    <value>If true, ModelClass.Namespace tracks ModelRoot.Namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/IsNamespaceTracking.DisplayName" xml:space="preserve">
    <value>Is Namespace Tracking</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Name.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Name.DisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.Description" xml:space="preserve">
    <value>Overrides default namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.DisplayName" xml:space="preserve">
    <value>Namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/TableName.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/TableName.Description" xml:space="preserve">
    <value>Name of the database table storing data for this class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelClass/TableName.DisplayName" xml:space="preserve">
    <value>Table Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum.DisplayName" xml:space="preserve">
    <value>Enum</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.Description" xml:space="preserve">
    <value>If true, values in this enumeration are flags and will have initial values set appropriately.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.DisplayName" xml:space="preserve">
    <value>Values are Flags</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/IsNamespaceTracking.Description" xml:space="preserve">
    <value>If true, ModelEnum.Namespace tracks ModelRoot.Namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/IsNamespaceTracking.DisplayName" xml:space="preserve">
    <value>Is Namespace Tracking</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Name.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Name.Description" xml:space="preserve">
    <value>Name of the enumeration</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Name.DisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.Description" xml:space="preserve">
    <value>Overrides default namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.DisplayName" xml:space="preserve">
    <value>Namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.Description" xml:space="preserve">
    <value>CLR type implementing this enum (usually Int32)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.DisplayName" xml:space="preserve">
    <value>Value Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.DisplayName" xml:space="preserve">
    <value>Model Enum Has Values</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.DisplayName" xml:space="preserve">
    <value>Enum</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Enum.PropertyDisplayName" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.DisplayName" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumHasValues/Value.PropertyDisplayName" xml:space="preserve">
    <value>Enum</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumValue.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumValue.DisplayName" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumValue/Name.DisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumValue/Value.Description" xml:space="preserve">
    <value>Optional value for this enum element. Must be in the range of the enum's ValueType</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelEnumValue/Value.DisplayName" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot.DisplayName" xml:space="preserve">
    <value>Entity Model</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.Description" xml:space="preserve">
    <value>If true, automatic database migrations will be run when changes are detected.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.DisplayName" xml:space="preserve">
    <value>Automatic Migrations Enabled</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.Description" xml:space="preserve">
    <value>Will chop generated code method chains</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.DisplayName" xml:space="preserve">
    <value>Chop Method Chains</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.Description" xml:space="preserve">
    <value>Default concurrency handling strategy</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.DisplayName" xml:space="preserve">
    <value>Concurrency Default</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.Description" xml:space="preserve">
    <value>Connection string to use. Mutually exclusive with ConnectionStringName</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.DisplayName" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.Description" xml:space="preserve">
    <value>Name of connection string in config file. Mutually exclusive with ConnectionString</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.DisplayName" xml:space="preserve">
    <value>Connection String Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.Description" xml:space="preserve">
    <value>Project directory for DbContext-related files</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.DisplayName" xml:space="preserve">
    <value>DbContext Output Directory</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.Description" xml:space="preserve">
    <value>Initialization strategy to synchronize the underlying database when an instance of this context is used for the first time</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.DisplayName" xml:space="preserve">
    <value>Database Initializer Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.Category" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.Description" xml:space="preserve">
    <value>The schema to use for table creation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.DisplayName" xml:space="preserve">
    <value>Database Schema</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseType.Description" xml:space="preserve">
    <value>Database manifest token. Optimization if runtime database type is known and unchanging.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseType.DisplayName" xml:space="preserve">
    <value>Database Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.Description" xml:space="preserve">
    <value>The type of container generated to represent associations if not overridden. Must implement ICollection&lt;T&gt;.</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.DisplayName" xml:space="preserve">
    <value>Default Collection Class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.Description" xml:space="preserve">
    <value>Default type for ID properties in new classes</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.DisplayName" xml:space="preserve">
    <value>Default Identity Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.Category" xml:space="preserve">
    <value>Entity Context</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.Description" xml:space="preserve">
    <value>Code visibility for entity container</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.DisplayName" xml:space="preserve">
    <value>Entity Container Access</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.Category" xml:space="preserve">
    <value>Entity Context</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.Description" xml:space="preserve">
    <value>Name of entity container class</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.DisplayName" xml:space="preserve">
    <value>Entity Container Name</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.Description" xml:space="preserve">
    <value>Version of Entity Framework for generated code</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.DisplayName" xml:space="preserve">
    <value>Entity Framework Version</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.Description" xml:space="preserve">
    <value>Project directory for entities</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.DisplayName" xml:space="preserve">
    <value>Entity Output Directory</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.Description" xml:space="preserve">
    <value>Project directory for enums</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.DisplayName" xml:space="preserve">
    <value>Enum Output Directory</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.Description" xml:space="preserve">
    <value>File name suffix for generated files (e.g., foo.generated.cs)</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.DisplayName" xml:space="preserve">
    <value>File Name Marker</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.Description" xml:space="preserve">
    <value>How tables will be created/used to handle inheritance</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.DisplayName" xml:space="preserve">
    <value>Inheritance Strategy</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.Description" xml:space="preserve">
    <value>If true, entity container will use lazy loading</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.DisplayName" xml:space="preserve">
    <value>Lazy Loading Enabled</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.Description" xml:space="preserve">
    <value>Namespace for all generated classes</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.DisplayName" xml:space="preserve">
    <value>Namespace</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.Category" xml:space="preserve">
    <value>Code Generation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.Description" xml:space="preserve">
    <value>If true, context will generate proxies for POCO entities</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.DisplayName" xml:space="preserve">
    <value>Proxy Generation Enabled</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.Category" xml:space="preserve">
    <value>Misc</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.Description" xml:space="preserve">
    <value>If true, will display cascade deleted associations as dashed red lines</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.DisplayName" xml:space="preserve">
    <value>Show Cascade Deletes</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.Category" xml:space="preserve">
    <value>Misc</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.Description" xml:space="preserve">
    <value>If true, will run Transform All Templates when this model is saved</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.DisplayName" xml:space="preserve">
    <value>Transform On Save</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/WarnOnMissingDocumentation.Description" xml:space="preserve">
    <value>If true, will generate warnings when summary documentation is missing</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRoot/WarnOnMissingDocumentation.DisplayName" xml:space="preserve">
    <value>Warn On Missing Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasComments.DisplayName" xml:space="preserve">
    <value>Model Root Has Comments</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/Comment.DisplayName" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/Comment.PropertyDisplayName" xml:space="preserve">
    <value>Model Root</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/ModelRoot.DisplayName" xml:space="preserve">
    <value>Model Root</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasComments/ModelRoot.PropertyDisplayName" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.DisplayName" xml:space="preserve">
    <value>Model Root Has Enums</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.DisplayName" xml:space="preserve">
    <value>Enum</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelEnum.PropertyDisplayName" xml:space="preserve">
    <value>Model Root</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.DisplayName" xml:space="preserve">
    <value>Model Root</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasEnums/ModelRoot.PropertyDisplayName" xml:space="preserve">
    <value>Enums</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasTypes.DisplayName" xml:space="preserve">
    <value>Model Root Has Types</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasTypes/ModelRoot.DisplayName" xml:space="preserve">
    <value>Model Root</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasTypes/ModelRoot.PropertyDisplayName" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelRootHasTypes/Type.DisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelType.Description" xml:space="preserve">
    <value>Left here so we can add complex types later</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.ModelType.DisplayName" xml:space="preserve">
    <value>Model Type</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Multiplicity/One.DisplayName" xml:space="preserve">
    <value>One</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Multiplicity/ZeroMany.DisplayName" xml:space="preserve">
    <value>ZeroMany</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.Multiplicity/ZeroOne.DisplayName" xml:space="preserve">
    <value>ZeroOne</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement.DisplayName" xml:space="preserve">
    <value>Named Element</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Description.Category" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Description.Description" xml:space="preserve">
    <value>Detailed code documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Description.DisplayName" xml:space="preserve">
    <value>Comment Detail</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Summary.Category" xml:space="preserve">
    <value>Documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Summary.Description" xml:space="preserve">
    <value>Brief code documentation</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.NamedElement/Summary.DisplayName" xml:space="preserve">
    <value>Comment Summary</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Internal.Description" xml:space="preserve">
    <value>Property is internal</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Internal.DisplayName" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Protected.Description" xml:space="preserve">
    <value>Property is protected</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Protected.DisplayName" xml:space="preserve">
    <value>Protected</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Public.Description" xml:space="preserve">
    <value>Property is public</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Public.DisplayName" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Internal.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Internal.DisplayName" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Private.DisplayName" xml:space="preserve">
    <value>Private</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Protected.Description" xml:space="preserve">
    <value>No description available</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Protected.DisplayName" xml:space="preserve">
    <value>Protected</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Public.DisplayName" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.DisplayName" xml:space="preserve">
    <value>Unidirectional Association</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalSource.DisplayName" xml:space="preserve">
    <value>Unidirectional Source</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalSource.PropertyDisplayName" xml:space="preserve">
    <value>Unidirectional Targets</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalTarget.DisplayName" xml:space="preserve">
    <value>Unidirectional Target</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation/UnidirectionalTarget.PropertyDisplayName" xml:space="preserve">
    <value>Unidirectional Sources</value>
  </data>
  <data name="Sawczyn.EFDesigner.EFModel.UnidirectionalConnector.DisplayName" xml:space="preserve">
    <value>Unidirectional Connector</value>
  </data>
  <data name="UnexpectedXmlElement" xml:space="preserve">
    <value>Unexpected XML element '{0}', ignored.</value>
  </data>
  <data name="UnidirectionalAssociationToolboxItem" xml:space="preserve">
    <value>Unidirectional Association</value>
  </data>
  <data name="UnidirectionalAssociationToolboxTooltip" xml:space="preserve">
    <value>Create a link between two entities with a navigation property on one side only</value>
  </data>
  <data name="UnloadableSaveValidationFailed" xml:space="preserve">
    <value>There were validation errors. Continuing to save may cause the file to become unloadable, do you want to continue?</value>
  </data>
  <data name="UnrecognizedElementLinkType" xml:space="preserve">
    <value>ElementLinkType {0} is not recognized as a type of domain relationship which belongs to this domain model.</value>
  </data>
  <data name="UnrecognizedElementType" xml:space="preserve">
    <value>ElementType {0} is not recognized as a type of domain class which belongs to this domain model.</value>
  </data>
  <data name="UnresolvedMoniker" xml:space="preserve">
    <value>Cannot resolve moniker '{0}'.</value>
  </data>
  <data name="UnresolvedToolboxItem" xml:space="preserve">
    <value>ToolboxItem {0} was not found</value>
  </data>
  <data name="UnsupportedToolboxFormat" xml:space="preserve">
    <value>Unsupported toolbox format: {0}</value>
  </data>
  <data name="VersionMismatch" xml:space="preserve">
    <value>Unsupported version '{0}', can only support '{1}'.</value>
  </data>
</root>